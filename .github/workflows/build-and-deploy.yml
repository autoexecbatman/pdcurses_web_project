name: Build and Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: write  # Need write access to push to gh-pages branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Install Emscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ..
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl2-dev libsdl2-ttf-dev fonts-dejavu
          
      - name: Get precompiled PDCurses
        run: |
          git clone https://github.com/autoexecbatman/pdcurses_web_project.git pdcurses_web
          # Create a directory for PDCurses includes and copy them
          mkdir -p pdcurses/include
          cp -r pdcurses_web/include/* pdcurses/include/
          # Create a directory for precompiled library if needed
          mkdir -p pdcurses/lib
          cp -r pdcurses_web/lib/* pdcurses/lib/ || echo "No precompiled libs found, will use header files only"
          # List the files to make sure they were copied correctly
          ls -la pdcurses/include/
          ls -la pdcurses/lib/ || echo "No lib directory available"
          
      - name: Set up assets directory
        run: |
          mkdir -p assets
          cp /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf assets/ || echo "Default font not found, using system font"
          if [ ! -f assets/DejaVuSansMono.ttf ]; then
            find /usr/share/fonts -name "*.ttf" | head -1 | xargs -I{} cp {} assets/DejaVuSansMono.ttf
          fi
          
      - name: Fix main.c
        run: |
          sed -i '/^\/\//s/^\/\///' main.c
          
      - name: Build WASM
        run: |
          source emsdk/emsdk_env.sh
          # If there's a precompiled library, use it, otherwise compile the source
          if [ -f pdcurses/lib/libpdcurses.a ]; then
            echo "Using precompiled PDCurses library"
            emcc -O2 -Wall -Ipdcurses/include main.c pdcurses/lib/libpdcurses.a \
            -o hello_pdcurses.html \
            -s WASM=1 -s USE_SDL=2 -s USE_SDL_TTF=2 -s ALLOW_MEMORY_GROWTH=1 \
            -s EXPORTED_RUNTIME_METHODS='["cwrap"]' \
            --preload-file assets \
            -s ASYNCIFY=1 \
            -s ASSERTIONS=1 \
            -s SAFE_HEAP=1 \
            -s ERROR_ON_UNDEFINED_SYMBOLS=0 \
            -s EXPORTED_FUNCTIONS='["_main", "_malloc"]' \
            --shell-file shell.html
          else
            echo "Using PDCurses sources from the repository"
            # If no precompiled library is found, try to find the source in the cloned repo
            if [ -d pdcurses_web/src ]; then
              emcc -O2 -Wall -Ipdcurses/include main.c $(find pdcurses_web/src -name "*.c") \
              -o hello_pdcurses.html \
              -s WASM=1 -s USE_SDL=2 -s USE_SDL_TTF=2 -s ALLOW_MEMORY_GROWTH=1 \
              -s EXPORTED_RUNTIME_METHODS='["cwrap"]' \
              --preload-file assets \
              -s ASYNCIFY=1 \
              -s ASSERTIONS=1 \
              -s SAFE_HEAP=1 \
              -s ERROR_ON_UNDEFINED_SYMBOLS=0 \
              -s EXPORTED_FUNCTIONS='["_main", "_malloc"]' \
              --shell-file shell.html
            else
              # Fallback to original method
              echo "Falling back to original PDCurses"
              git clone https://github.com/wmcbrine/PDCurses.git pdcurses_original
              emcc -O2 -Wall -Ipdcurses/include main.c $(find pdcurses_original/sdl2 -name "*.c") $(find pdcurses_original/pdcurses -name "*.c") \
              -o hello_pdcurses.html \
              -s WASM=1 -s USE_SDL=2 -s USE_SDL_TTF=2 -s ALLOW_MEMORY_GROWTH=1 \
              -s EXPORTED_RUNTIME_METHODS='["cwrap"]' \
              --preload-file assets \
              -s ASYNCIFY=1 \
              -s ASSERTIONS=1 \
              -s SAFE_HEAP=1 \
              -s ERROR_ON_UNDEFINED_SYMBOLS=0 \
              -s EXPORTED_FUNCTIONS='["_main", "_malloc"]' \
              --shell-file shell.html
            fi
          fi
          
      - name: Prepare for deployment
        run: |
          # Create a deployment directory
          mkdir -p deploy
          
          # Copy files to deployment directory
          cp hello_pdcurses.html deploy/index.html
          cp hello_pdcurses.js deploy/
          cp hello_pdcurses.wasm deploy/
          cp hello_pdcurses.data deploy/
          
          # Verify the files
          ls -la deploy/
          
      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deploy